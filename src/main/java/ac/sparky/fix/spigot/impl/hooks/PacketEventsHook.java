package ac.sparky.fix.spigot.impl.hooks;

import ac.sparky.fix.common.Helper;
import ac.sparky.fix.spigot.Plugin;
import ac.sparky.fix.spigot.util.PunishmentUtil;
import io.github.retrooper.packetevents.PacketEvents;
import io.github.retrooper.packetevents.event.PacketListenerAbstract;
import io.github.retrooper.packetevents.event.impl.PacketPlayReceiveEvent;
import io.github.retrooper.packetevents.packettype.PacketType;
import io.github.retrooper.packetevents.packetwrappers.play.in.chat.WrappedPacketInChat;
import io.github.retrooper.packetevents.settings.PacketEventsSettings;
import io.github.retrooper.packetevents.utils.server.ServerVersion;

public class PacketEventsHook extends PacketListenerAbstract {

    public PacketEventsHook() {
        Plugin.getInstance().getLogger().info("Hooked into PacketEvents");
    }

    public void register() {
        PacketEvents.create(Plugin.getInstance());

        PacketEventsSettings settings = PacketEvents.get().getSettings();
        settings.fallbackServerVersion(ServerVersion.v_1_7_10).compatInjector(false).checkForUpdates(false);

        PacketEvents.get().loadAsyncNewThread();
        PacketEvents.get().registerListener(this);
        PacketEvents.get().init();
    }

    @Override
    public void onPacketPlayReceive(PacketPlayReceiveEvent event) {
        if (event.getPacketId() == PacketType.Play.Client.CHAT) {

            WrappedPacketInChat wrappedPacketInChat = new WrappedPacketInChat(event.getNMSPacket());

            if (Helper.getInstance().isInvalidJNDI(wrappedPacketInChat.getMessage())) {
                event.setCancelled(true);
                PunishmentUtil.punish(event.getPlayer());
            }
        }
    }
}
